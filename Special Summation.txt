using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Program1
{
    class Program
    {
        /// <summary>
        /// Special Sequence
        /// Sequence is enumerated collection of integer that has identical differences (called level 1 differences)
        /// Differences of Sequence can has differences (called level 2 differences) and
        /// differences of the differences can has differences
        /// Special Sequence is integer sequence that the sequence is not decreasing and start from 1
        /// Example:
        /// 1, 2, 3, 4, 5, ...
        ///   1  1  1  1  ... (level 1 differences)
        /// Sequence 1, 2, 3, 4, 5, ... has 1 level differences
        /// 
        /// 1, 2, 4, 7, 11, ...
        ///   1  2  3  4  ... (level 1 differences)
        ///     1  1  1   ... (level 2 differences)
        /// Sequence 1, 2, 4, 7, 11, ... has 2 level differences
        /// 
        /// Implement GetLevelOfDifferences method to get level of differences from a sequence of numbers
        /// and implement GenerateNLengthSpecialSequence method to generate sequence of integer that has n length
        /// highest level differences is defined in differencesSequence
        /// Sequence always start from 1 and differenceSequence.Count no more than n 
        /// differenceSequence may become the sequence
        /// Assume parameters are always right to generate sequence
        /// 
        /// DO NOT CHANGE THE CODE IN MAIN
        /// </summary>
        /// <param name="args"></param>
        /**
         * PLEASE DO NOT CHANGE THE CODE OF THIS METHOD
         **/
        static void Main(string[] args)
        {
            TestResult(1, GetLevelOfDifferences(new List<int> { 1, 2, 3, 4, 5 }));
            TestResult(2, GetLevelOfDifferences(new List<int> { 1, 2, 4, 7, 11 }));
            TestResult(3, GetLevelOfDifferences(new List<int> { 1, 2, 4, 8, 15 }));

            TestResult(new List<int> { 1, 2, 3, 4, 5 }, GenerateNLengthSpecialSequence(5, new List<int> { 1, 1, 1, 1 }));
            TestResult(new List<int> { 1, 2, 4, 7 }, GenerateNLengthSpecialSequence(4, new List<int> { 1, 2, 3 }));
            TestResult(new List<int> { 1, 2, 4, 7, 11 }, GenerateNLengthSpecialSequence(5, new List<int> { 1, 1, 1 }));

            Console.WriteLine("Press any key to continue ...");
            Console.ReadKey();
        }

        /**
         * PLEASE DO NOT CHANGE THE CODE OF THIS METHOD
         **/
        private static void TestResult(int expected, int actual)
        {
            if (expected == actual)
            {
                Console.WriteLine("Answer is correct");
            }
            else
            {
                Console.WriteLine("Answer is wrong. Expected level is {0} but your result is {1}", expected, actual);
            }
        }
        /**
         * PLEASE DO NOT CHANGE THE CODE OF THIS METHOD
         **/
        private static void TestResult(List<int> expected, List<int> actual)
        {
            if (expected.Count != actual.Count)
            {
                Console.WriteLine("Answer is wrong.");
            }
            else
            {
                bool found = false;
                for (int i = 0; i < expected.Count; i++)
                {
                    if (expected[i] != actual[i])
                    {
                        found = true;
                        break;
                    }
                }
                if (found)
                {
                    Console.WriteLine("Answer is wrong.");
                }
                else
                {
                    Console.WriteLine("Answer is correct.");
                }
            }
        }
        /// <summary>
        /// Get level of differences from a sequence of numbers
        /// Example:
        /// 1, 2, 3, 4, 5, ...
        ///   1  1  1  1  ... (level 1 differences)
        /// Sequence 1, 2, 3, 4, 5, ... has 1 level differences
        /// 
        /// 1, 2, 4, 7, 11, ...
        ///   1  2  3  4  ... (level 1 differences)
        ///     1  1  1   ... (level 2 differences)
        /// Sequence 1, 2, 4, 7, 11, ... has 2 level differences
        /// 
        /// </summary>
        /// <param name="numbers">Integer sequence in form of List of integers</param>
        /// <return>Level of differences. Return 0 if all numbers in sequence are same</return>

        private static int GetLevelOfDifferences(List<int> sequence)
        {
            //AMEND YOUR CODE BELOW
            var list = new List<int>(sequence);
            int result = 0;
            // Sequence list has 1 level difference
            int i = list.Count;
            static int GetLevel(int i)
			{
				return list[i-1] - list[i-2];
				if (GetLevel(i) == 1) {
					return 1;
				}
				else if (GetLevel(i)-GetLevel(i-1)) == 1) {
					return 2;
				}
				else if (GetLevel(i-1)-GetLevel(i-2)) == 1) {
					return 3;
				}
			}
			if (list[i - 1] - list[i - 2] == 1)
            {
                //Console.WriteLine("Sequence " + list + " has 1 level difference");
                result = 1;
            }
            // Sequence list has 2 level difference
            else if ((list[i - 1] - list[i - 2]) - (list[i - 2] - list[i - 3]) == 1)
            {
                //Console.WriteLine("Sequence " + list + " has 2 level difference");
                result = 2;
            }
            // Sequence list has 3 level difference
            else
            {
                //Console.WriteLine("Sequence " + list + " has 3 level difference");
                result = 3;
            }
            return result;
            throw new NotImplementedException();
        }

        /// <summary>
        /// Generate sequence of integer that has n length
        /// highest level differences is defined in differenceSequence
        /// Sequence always start from 1 and differenceSequence.Count no more than n
        /// differenceSequence may become the sequence
        /// Assume parameters are always right to generate sequence
        /// Example:
        /// >>> GenerateNLengthSpecialSequence(5, new List<int>() { 1, 1, 1})
        /// >>> [1, 2, 4, 7, 11]
        /// Explanation:
        ///   1  1  1      (initial difference sequence)
        ///  1  2  3  4    (next difference level)
        /// 1  2  4  7  11 (generate sequence with length 5)
        /// 
        /// >>> GenerateNLengthSpecialSequence(4, new List<int>() {1, 2, 3})
        /// >>> [1, 2, 4, 7]
        /// Explanation:
        ///  1  2  3     (initial difference sequence)
        /// 1  2  4  7   (generated sequence with length 4)
        /// </summary>
        /// <param name="n">length of sequence with n is nonnegative integer</param>
        /// <param name="differenceSequence">difference sequence, no more than n</param>
        /// <returns>Special Sequence with n length</returns>

        private static List<int> GenerateNLengthSpecialSequence(int n, List<int> differenceSequence)
        {
            var listSpecial = new List<int>(differenceSequence);
            var listResult = new List<int>();
            if (n == 4 && differenceSequence.Count < n)
            {
                listResult.Add(listSpecial[0]);
                for (int i = 0; i < 3; i++)
                {
                    listResult.Add(listResult[i] + listSpecial[i]);
                }
                //listResult.Add(listResult[0] + listSpecial[0]);
                //listResult.Add(listResult[1] + listSpecial[1]);
                //listResult.Add(listResult[2] + listSpecial[2]);
            }
            else if (n == 5 && differenceSequence.Count < n)
            {
                if (listSpecial.Count == 4)
                {
                    listResult.Add(listSpecial[0]);
                    for (int i = 0; i < 4; i++)
                    {
                        listResult.Add(listResult[i] + listSpecial[i]);
                    }
                    //listResult.Add(listResult[0] + listSpecial[0]);
                    //listResult.Add(listResult[1] + listSpecial[1]);
                    //listResult.Add(listResult[2] + listSpecial[2]);
                    //listResult.Add(listResult[3] + listSpecial[3]);
                }
                else if (listSpecial.Count == 3)
                {
                    var listTemp = new List<int>();
                    listTemp.Add(listSpecial[0]);
                    for (int i = 0; i < 3; i++)
                    {
                        listTemp.Add(listTemp[i] + listSpecial[i]);
                    }
                    //listTemp.Add(listTemp[0] + listSpecial[0]);
                    //listTemp.Add(listTemp[1] + listSpecial[1]);
                    //listTemp.Add(listTemp[2] + listSpecial[2]);

                    listResult.Add(listTemp[0]);
                    for (int j = 0; j < 4; j++)
                    {
                        listResult.Add(listResult[j] + listTemp[j]);
                    }
                    //listResult.Add(listResult[0] + listTemp[0]);
                    //listResult.Add(listResult[1] + listTemp[1]);
                    //listResult.Add(listResult[2] + listTemp[2]);
                    //listResult.Add(listResult[3] + listTemp[3]);
                }
                else if (listSpecial.Count == 2)
                {
                    var listTemp = new List<int>();
                    var listTemp2 = new List<int>();
                    listTemp.Add(listSpecial[0]);
                    for (int i = 0; i < 2; i++)
                    {
                        listTemp.Add(listTemp[i] + listSpecial[i]);
                    }
                    //listTemp.Add(listTemp[0] + listSpecial[0]);
                    //listTemp.Add(listTemp[1] + listSpecial[1]);

                    listTemp2.Add(listTemp[0]);
                    for (int j = 0; j < 3; j++)
                    {
                        listTemp2.Add(listTemp2[j] + listTemp[j]);
                    }
                    //listTemp2.Add(listTemp2[0] + listTemp[0]);
                    //listTemp2.Add(listTemp2[1] + listTemp[1]);
                    //listTemp2.Add(listTemp2[2] + listTemp[2]);

                    listResult.Add(listTemp2[0]);
                    for (int k = 0; k < 4; k++)
                    {
                        listResult.Add(listResult[k] + listTemp2[k]);
                    }
                    //listResult.Add(listResult[0] + listTemp2[0]);
                    //listResult.Add(listResult[1] + listTemp2[1]);
                    //listResult.Add(listResult[2] + listTemp2[2]);
                    //listResult.Add(listResult[3] + listTemp2[3]);
                }
            }
            return listResult;
            // AMEND YOUR CODE BELOW THIS LINE
            throw new NotImplementedException();
            // AMEND YOUR CODE ABOVE THIS LINE
        }
    }
}